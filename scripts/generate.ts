import fs from "fs";
import path from "path";
import { program } from "commander";
import { EAWDef, readVersion, readDefs } from "./lib/eaw";

const SOURCE_PATH = path.resolve(__dirname, "../data/EastAsianWidth.txt");
const TARGET_PATH = path.resolve(__dirname, "../src/defs.ts");

const ENCODING = "utf-8";

const HEADER = `/*
 * HELLO
 *
 * Generated by script. DO NOT EDIT!
 *
 * The part between BEGIN and END is derived from Unicode Data Files
 * and provided under Unicode, Inc. License Agreement.
 */`;
const IMPORT = `import { EAWDef } from "./types";`;
const BEGIN = `/* BEGIN */`;
const END = "/* END */";

function generateJs(version: string, defs: readonly EAWDef[]): string {
  const elems = defs.map(def => `  [${def.start}, ${def.end}, "${def.prop}"],`).join("\n");
  const js =
    [
      HEADER,
      "",
      IMPORT,
      "",
      BEGIN,
      `export const defs: readonly EAWDef[] = [\n${elems}\n];`,
      END,
      "",
      `export const version: string = ${JSON.stringify(version)};`,
    ].join("\n") + "\n";
  return js;
}

async function main(test: boolean): Promise<void> {
  const src = await fs.promises.readFile(SOURCE_PATH, { encoding: ENCODING });
  const version = readVersion(src);
  const defs = readDefs(src);
  const js = generateJs(version, defs);
  if (test) {
    const trg = await fs.promises.readFile(TARGET_PATH, { encoding: ENCODING });
    if (trg !== js) {
      throw new Error("Generated script is outdated.");
    }
  } else {
    await fs.promises.writeFile(TARGET_PATH, js, { encoding: ENCODING });
  }
}

program.option("-t, --test", "test if generated script is outdated").parse(process.argv);

const test = program.test as boolean;

main(test).catch(err => {
  // eslint-disable-next-line no-console
  console.error(err);
  process.exit(1);
});
